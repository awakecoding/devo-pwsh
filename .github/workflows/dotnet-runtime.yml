name: .NET runtime
on: workflow_dispatch
jobs:
  build:
    name: .NET runtime [${{matrix.arch}}-${{matrix.os}}]
    runs-on: ${{matrix.runner}}
    strategy:
      fail-fast: false
      matrix:
        arch: [ x86_64 ]
        os: [ windows, macos, linux ]
        version: [ 8.0.1 ]

        include:
          - version: 8.0.1
            git-ref: v8.0.1

          - os: windows
            runner: windows-2022
          - os: macos
            runner: macos-13
          - os: linux
            runner: ubuntu-22.04
  
    steps:
      - name: Configure Windows runner
        if: runner.os == 'Windows'
        run: |
          choco install ninja 7zip wget
          git config --system core.longpaths true
          echo "BUILD_CMD=./build.cmd" >> $Env:GITHUB_ENV

      - name: Configure macOS runner
        if: runner.os == 'macOS'
        run: |
          brew install ninja
          echo "MACOSX_DEPLOYMENT_TARGET=10.12" >> $GITHUB_ENV
          echo "BUILD_CMD=./build.sh" >> $GITHUB_ENV

      - name: Configure Linux runner
        if: runner.os == 'Linux'
        run: |
          sudo apt update
          sudo apt install git xz-utils ninja-build
          sudo apt install libkrb5-dev liblttng-ust-dev
          echo "BUILD_CMD=./build.sh" >> $GITHUB_ENV

      - name: Install clang+llvm
        shell: pwsh
        run: |
          $ClangLlvmVersion='16.0.6'
          $ClangLlvmPlatform = @{'windows'='windows';'macos'='macos';'linux'='ubuntu-20.04'}['${{matrix.os}}']
          $ClangLlvmBaseUrl="https://github.com/awakecoding/llvm-prebuilt/releases/download/v2023.3.0"
          $ClangLlvmName="clang+llvm-${ClangLlvmVersion}-x86_64-${ClangLlvmPlatform}"
          wget "${ClangLlvmBaseUrl}/${ClangLlvmName}.tar.xz"
          if ($IsWindows) {
            $LLVM_PREFIX="C:/llvm"
            cmd.exe /c "7z.exe x ${ClangLlvmName}.tar.xz -so | 7z x -si -ttar -o`"C:/temp`""
            mv "C:/temp/${ClangLlvmName}" $LLVM_PREFIX
          } else {
            $LLVM_PREFIX="/opt/llvm"
            tar -xf "${ClangLlvmName}.tar.xz" -C /tmp
            sudo mv "/tmp/${ClangLlvmName}" $LLVM_PREFIX
          }
          $LLVM_BIN_PATH="$LLVM_PREFIX/bin"
          $LLVM_DIR="$LLVM_PREFIX/lib/cmake/llvm"
          echo "LLVM_DIR=$LLVM_DIR" >> $Env:GITHUB_ENV
          echo "PATH=$LLVM_BIN_PATH$([IO.Path]::PathSeparator)$Env:PATH" >> $Env:GITHUB_ENV

      - name: Clone .NET runtime ${{matrix.version}}
        uses: actions/checkout@v4
        with:
          repository: dotnet/runtime
          ref: ${{matrix.git-ref}}
          path: dotnet-runtime

      - name: Enable Windows environment
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: amd64

      - name: Restore nuget packages
        working-directory: dotnet-runtime
        shell: pwsh
        run: |
          & $Env:BUILD_CMD -restore

      - name: Build .NET runtime
        working-directory: dotnet-runtime
        shell: pwsh
        run: |
          & $Env:BUILD_CMD -c Release -ninja
